name: Build and Tag Docker Image

on:
  workflow_dispatch:  
  push:
    branches:
      - main
      
jobs:
  build-and-tag:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Install jq (used to parse docker-compose)
        run: sudo apt-get update && sudo apt-get install -y jq
  
      - name: Build **every** service and push
        shell: bash
        run: |
          set -euo pipefail
  
          # Grab the compose file once in JSON form
          COMPOSE=$(docker compose -f docker-compose.yml config --format json)
  
          # Iterate over all services
          echo "$COMPOSE" | jq -r '.services | keys[]' | while read svc; do
            # Extract context & (optional) custom Dockerfile
            context=$(echo "$COMPOSE" | jq -r ".services[\"$svc\"].build.context // \"./$svc\"")
            dockerfile=$(echo "$COMPOSE" | jq -r ".services[\"$svc\"].build.dockerfile // \"Dockerfile\"")
  
            img="${REGISTRY}/${REPO}/${svc}:${TAG}"
  
            echo -e "\n=== Building $img ==="
            jf docker build -f "${context}/${dockerfile}" -t "$img" "$context"
  
            echo -e "\n--- Pushing $img ---"
            jf docker push "$img"
          done
          
      - name: Publish Build info With JFrog CLI
        env:
          # Generated and maintained by GitHub
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          # JFrog organization secret
          JFROG_CLI_BUILD_NUMBER : ${{ github.run_number }}
        run: |
          # Export the build name and build nuber
          # Collect environment variables for the build
          jf rt build-collect-env
          # Collect VCS details from git and add them to the build
          jf rt build-add-git
          # Publish build info
          jf rt build-publish
