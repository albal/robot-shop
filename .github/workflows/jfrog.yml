name: Build and Tag Docker Image

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-and-tag:
    runs-on: ubuntu-latest

    env:
      REGISTRY: tsew.jfrog.io
      REPO:     robot-shop-docker
      TAG:      ${{ github.run_number }}
      JFROG_CLI_BUILD_NAME: compose-build
      JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL:           ${{ vars.JF_URL }}
          JF_ACCESS_TOKEN:  ${{ secrets.JF_ACCESS_TOKEN }}

      - name: Install jq (parse docker-compose)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Build services **only if they have build.context**
        shell: bash
        run: |
          set -euo pipefail

          # Convert compose file to JSON once
          COMPOSE=$(docker compose -f docker-compose.yaml config --format json)

          echo "$COMPOSE" | jq -r '.services | keys[]' | while read svc; do
            # Pick out build section if it exists
            build_json=$(echo "$COMPOSE" | jq -c ".services[\"$svc\"].build // empty")

            # Skip services with no build section at all
            if [[ -z "$build_json" || "$build_json" == "null" ]]; then
              echo "➡️  Skipping $svc – no build section"
              continue
            fi

            # Handle both shorthand and object forms of 'build'
            context=$(echo "$build_json" | jq -r 'if type=="string" then . else .context // "" end')

            if [[ -z "$context" ]]; then
              echo "➡️  Skipping $svc – build.context missing"
              continue
            fi

            dockerfile=$(echo "$build_json" | jq -r 'if type=="string" then "Dockerfile" else .dockerfile // "Dockerfile" end')
            img="${REGISTRY}/${REPO}/${svc}:${TAG}"

            echo -e "\n=== Building $img (context: $context, dockerfile: $dockerfile) ==="
            jf docker build -f "${context}/${dockerfile}" -t "$img" "$context"

            echo -e "\n--- Pushing $img ---"
            jf docker push "$img"
          done

      - name: Publish build info to Artifactory
        env:
          JFROG_CLI_BUILD_NAME: jfrog-docker-build-example
          JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          jf rt build-publish
